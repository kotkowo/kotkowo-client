# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# The `Upload` scalar type represents a file upload.
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  nei: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  nei: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  nei: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  nei: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  nei: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  nei: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  nei: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderRelationResponseCollection
  files(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

enum ENUM_CONTENTRELEASESRELEASE_STATUS {
  ready
  blocked
  failed
  done
  empty
}

input ContentReleasesReleaseFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  releasedAt: DateTimeFilterInput
  scheduledAt: DateTimeFilterInput
  timezone: StringFilterInput
  status: StringFilterInput
  actions: ContentReleasesReleaseActionFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ContentReleasesReleaseFiltersInput]
  or: [ContentReleasesReleaseFiltersInput]
  not: ContentReleasesReleaseFiltersInput
}

input ContentReleasesReleaseInput {
  name: String
  releasedAt: DateTime
  scheduledAt: DateTime
  timezone: String
  status: ENUM_CONTENTRELEASESRELEASE_STATUS
  actions: [ID]
}

type ContentReleasesRelease {
  name: String!
  releasedAt: DateTime
  scheduledAt: DateTime
  timezone: String
  status: ENUM_CONTENTRELEASESRELEASE_STATUS!
  actions(
    filters: ContentReleasesReleaseActionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ContentReleasesReleaseActionRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type ContentReleasesReleaseEntity {
  id: ID
  attributes: ContentReleasesRelease
}

type ContentReleasesReleaseEntityResponse {
  data: ContentReleasesReleaseEntity
}

type ContentReleasesReleaseEntityResponseCollection {
  data: [ContentReleasesReleaseEntity!]!
  meta: ResponseCollectionMeta!
}

enum ENUM_CONTENTRELEASESRELEASEACTION_TYPE {
  publish
  unpublish
}

input ContentReleasesReleaseActionFiltersInput {
  id: IDFilterInput
  type: StringFilterInput
  contentType: StringFilterInput
  locale: StringFilterInput
  release: ContentReleasesReleaseFiltersInput
  isEntryValid: BooleanFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ContentReleasesReleaseActionFiltersInput]
  or: [ContentReleasesReleaseActionFiltersInput]
  not: ContentReleasesReleaseActionFiltersInput
}

input ContentReleasesReleaseActionInput {
  type: ENUM_CONTENTRELEASESRELEASEACTION_TYPE
  contentType: String
  locale: String
  release: ID
  isEntryValid: Boolean
}

type ContentReleasesReleaseAction {
  type: ENUM_CONTENTRELEASESRELEASEACTION_TYPE!
  entry: GenericMorph
  contentType: String!
  locale: String
  release: ContentReleasesReleaseEntityResponse
  isEntryValid: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type ContentReleasesReleaseActionEntity {
  id: ID
  attributes: ContentReleasesReleaseAction
}

type ContentReleasesReleaseActionEntityResponse {
  data: ContentReleasesReleaseActionEntity
}

type ContentReleasesReleaseActionEntityResponseCollection {
  data: [ContentReleasesReleaseActionEntity!]!
  meta: ResponseCollectionMeta!
}

type ContentReleasesReleaseActionRelationResponseCollection {
  data: [ContentReleasesReleaseActionEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input AdoptedCatFiltersInput {
  id: IDFilterInput
  adoption_date: DateTimeFilterInput
  cat: CatFiltersInput
  caretaker: ContactInformationFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [AdoptedCatFiltersInput]
  or: [AdoptedCatFiltersInput]
  not: AdoptedCatFiltersInput
}

input AdoptedCatInput {
  adoption_date: DateTime
  cat: ID
  caretaker: ID
  publishedAt: DateTime
}

type AdoptedCat {
  adoption_date: DateTime!
  cat: CatEntityResponse
  caretaker: ContactInformationEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type AdoptedCatEntity {
  id: ID
  attributes: AdoptedCat
}

type AdoptedCatEntityResponse {
  data: AdoptedCatEntity
}

type AdoptedCatEntityResponseCollection {
  data: [AdoptedCatEntity!]!
  meta: ResponseCollectionMeta!
}

input AnnouncementFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  announcement_tags: AnnouncementTagFiltersInput
  article: ArticleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [AnnouncementFiltersInput]
  or: [AnnouncementFiltersInput]
  not: AnnouncementFiltersInput
}

input AnnouncementInput {
  image: ID
  title: String
  announcement_tags: [ID]
  article: ID
  publishedAt: DateTime
}

type Announcement {
  image: UploadFileEntityResponse!
  title: String!
  announcement_tags(
    filters: AnnouncementTagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AnnouncementTagRelationResponseCollection
  article: ArticleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type AnnouncementEntity {
  id: ID
  attributes: Announcement
}

type AnnouncementEntityResponse {
  data: AnnouncementEntity
}

type AnnouncementEntityResponseCollection {
  data: [AnnouncementEntity!]!
  meta: ResponseCollectionMeta!
}

input AnnouncementTagFiltersInput {
  id: IDFilterInput
  text: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [AnnouncementTagFiltersInput]
  or: [AnnouncementTagFiltersInput]
  not: AnnouncementTagFiltersInput
}

input AnnouncementTagInput {
  text: String
}

type AnnouncementTag {
  text: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type AnnouncementTagEntity {
  id: ID
  attributes: AnnouncementTag
}

type AnnouncementTagEntityResponse {
  data: AnnouncementTagEntity
}

type AnnouncementTagEntityResponseCollection {
  data: [AnnouncementTagEntity!]!
  meta: ResponseCollectionMeta!
}

type AnnouncementTagRelationResponseCollection {
  data: [AnnouncementTagEntity!]!
}

input ArticleFiltersInput {
  id: IDFilterInput
  Introduction: StringFilterInput
  announcement: AnnouncementFiltersInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ArticleFiltersInput]
  or: [ArticleFiltersInput]
  not: ArticleFiltersInput
}

input ArticleInput {
  Introduction: String
  announcement: ID
  image: ID
  content: String
  publishedAt: DateTime
}

type Article {
  Introduction: String!
  announcement: AnnouncementEntityResponse
  image: UploadFileEntityResponse!
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ArticleEntity {
  id: ID
  attributes: Article
}

type ArticleEntityResponse {
  data: ArticleEntity
}

type ArticleEntityResponseCollection {
  data: [ArticleEntity!]!
  meta: ResponseCollectionMeta!
}

input ArticleViewFiltersInput {
  id: IDFilterInput
  client_address: StringFilterInput
  article: ArticleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ArticleViewFiltersInput]
  or: [ArticleViewFiltersInput]
  not: ArticleViewFiltersInput
}

input ArticleViewInput {
  client_address: String
  article: ID
}

type ArticleView {
  client_address: String!
  article: ArticleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type ArticleViewEntity {
  id: ID
  attributes: ArticleView
}

type ArticleViewEntityResponse {
  data: ArticleViewEntity
}

type ArticleViewEntityResponseCollection {
  data: [ArticleViewEntity!]!
  meta: ResponseCollectionMeta!
}

enum ENUM_CAT_SEX {
  Male
  Female
}

enum ENUM_CAT_AGE {
  Junior
  Adult
  Senior
}

enum ENUM_CAT_MEDICAL_STATUS {
  TestedAndVaccinated
}

enum ENUM_CAT_FIV_FELV {
  Negative
  Positive
}

enum ENUM_CAT_COLOR {
  Black
  Gray
  Tricolor
  Patched
  Ginger
  OtherColor
}

input CatFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  images: ImageFiltersInput
  description_heading: StringFilterInput
  description: StringFilterInput
  sex: StringFilterInput
  age: StringFilterInput
  medical_status: StringFilterInput
  fiv_felv: StringFilterInput
  castrated: BooleanFilterInput
  healthy: BooleanFilterInput
  cat_tags: CatTagFiltersInput
  color: StringFilterInput
  is_dead: BooleanFilterInput
  contact_informations: ContactInformationFiltersInput
  chip_number: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [CatFiltersInput]
  or: [CatFiltersInput]
  not: CatFiltersInput
}

input CatInput {
  name: String
  slug: String
  images: [ID]
  description_heading: String
  description: String
  sex: ENUM_CAT_SEX
  age: ENUM_CAT_AGE
  medical_status: ENUM_CAT_MEDICAL_STATUS
  fiv_felv: ENUM_CAT_FIV_FELV
  castrated: Boolean
  healthy: Boolean
  cat_tags: [ID]
  color: ENUM_CAT_COLOR
  is_dead: Boolean
  contact_informations: [ID]
  chip_number: String
  publishedAt: DateTime
}

type Cat {
  name: String
  slug: String!
  images(
    filters: ImageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ImageRelationResponseCollection
  description_heading: String
  description: String
  sex: ENUM_CAT_SEX!
  age: ENUM_CAT_AGE
  medical_status: ENUM_CAT_MEDICAL_STATUS
  fiv_felv: ENUM_CAT_FIV_FELV
  castrated: Boolean
  healthy: Boolean
  cat_tags(
    filters: CatTagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CatTagRelationResponseCollection
  color: ENUM_CAT_COLOR!
  is_dead: Boolean!
  contact_informations(
    filters: ContactInformationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ContactInformationRelationResponseCollection
  chip_number: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type CatEntity {
  id: ID
  attributes: Cat
}

type CatEntityResponse {
  data: CatEntity
}

type CatEntityResponseCollection {
  data: [CatEntity!]!
  meta: ResponseCollectionMeta!
}

input CatTagFiltersInput {
  id: IDFilterInput
  text: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [CatTagFiltersInput]
  or: [CatTagFiltersInput]
  not: CatTagFiltersInput
}

input CatTagInput {
  text: String
}

type CatTag {
  text: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type CatTagEntity {
  id: ID
  attributes: CatTag
}

type CatTagEntityResponse {
  data: CatTagEntity
}

type CatTagEntityResponseCollection {
  data: [CatTagEntity!]!
  meta: ResponseCollectionMeta!
}

type CatTagRelationResponseCollection {
  data: [CatTagEntity!]!
}

input ContactInformationFiltersInput {
  id: IDFilterInput
  phone_number: StringFilterInput
  first_name: StringFilterInput
  last_name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [ContactInformationFiltersInput]
  or: [ContactInformationFiltersInput]
  not: ContactInformationFiltersInput
}

input ContactInformationInput {
  phone_number: String
  first_name: String
  last_name: String
  publishedAt: DateTime
}

type ContactInformation {
  phone_number: String!
  first_name: String!
  last_name: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ContactInformationEntity {
  id: ID
  attributes: ContactInformation
}

type ContactInformationEntityResponse {
  data: ContactInformationEntity
}

type ContactInformationEntityResponseCollection {
  data: [ContactInformationEntity!]!
  meta: ResponseCollectionMeta!
}

type ContactInformationRelationResponseCollection {
  data: [ContactInformationEntity!]!
}

input FoundCatFiltersInput {
  id: IDFilterInput
  found_location: StringFilterInput
  special_signs: StringFilterInput
  found_datetime: DateTimeFilterInput
  cat: CatFiltersInput
  discovery_circumstances: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [FoundCatFiltersInput]
  or: [FoundCatFiltersInput]
  not: FoundCatFiltersInput
}

input FoundCatInput {
  found_location: String
  special_signs: String
  found_datetime: DateTime
  cat: ID
  discovery_circumstances: String
  publishedAt: DateTime
}

type FoundCat {
  found_location: String!
  special_signs: String
  found_datetime: DateTime!
  cat: CatEntityResponse
  discovery_circumstances: String!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type FoundCatEntity {
  id: ID
  attributes: FoundCat
}

type FoundCatEntityResponse {
  data: FoundCatEntity
}

type FoundCatEntityResponseCollection {
  data: [FoundCatEntity!]!
  meta: ResponseCollectionMeta!
}

input ImageFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ImageFiltersInput]
  or: [ImageFiltersInput]
  not: ImageFiltersInput
}

input ImageInput {
  title: String
  image: ID
}

type Image {
  image: UploadFileEntityResponse!
  createdAt: DateTime
  updatedAt: DateTime
}

type ImageEntity {
  id: ID
  attributes: Image
}

type ImageEntityResponse {
  data: ImageEntity
}

type ImageEntityResponseCollection {
  data: [ImageEntity!]!
  meta: ResponseCollectionMeta!
}

type ImageRelationResponseCollection {
  data: [ImageEntity!]!
}

input LookingForAdoptionCatFiltersInput {
  id: IDFilterInput
  cat: CatFiltersInput
  owned_by_kotkowo: BooleanFilterInput
  caretaker: ContactInformationFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [LookingForAdoptionCatFiltersInput]
  or: [LookingForAdoptionCatFiltersInput]
  not: LookingForAdoptionCatFiltersInput
}

input LookingForAdoptionCatInput {
  cat: ID
  owned_by_kotkowo: Boolean
  caretaker: ID
  publishedAt: DateTime
}

type LookingForAdoptionCat {
  cat: CatEntityResponse
  owned_by_kotkowo: Boolean!
  caretaker: ContactInformationEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type LookingForAdoptionCatEntity {
  id: ID
  attributes: LookingForAdoptionCat
}

type LookingForAdoptionCatEntityResponse {
  data: LookingForAdoptionCatEntity
}

type LookingForAdoptionCatEntityResponseCollection {
  data: [LookingForAdoptionCatEntity!]!
  meta: ResponseCollectionMeta!
}

input LostCatFiltersInput {
  id: IDFilterInput
  disappearance_location: StringFilterInput
  special_signs: StringFilterInput
  during_medical_treatment: BooleanFilterInput
  disappearance_datetime: DateTimeFilterInput
  cat: CatFiltersInput
  disappearance_circumstances: BooleanFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [LostCatFiltersInput]
  or: [LostCatFiltersInput]
  not: LostCatFiltersInput
}

input LostCatInput {
  disappearance_location: String
  special_signs: String
  during_medical_treatment: Boolean
  disappearance_datetime: DateTime
  cat: ID
  disappearance_circumstances: Boolean
  publishedAt: DateTime
}

type LostCat {
  disappearance_location: String!
  special_signs: String
  during_medical_treatment: Boolean!
  disappearance_datetime: DateTime!
  cat: CatEntityResponse
  disappearance_circumstances: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type LostCatEntity {
  id: ID
  attributes: LostCat
}

type LostCatEntityResponse {
  data: LostCatEntity
}

type LostCatEntityResponseCollection {
  data: [LostCatEntity!]!
  meta: ResponseCollectionMeta!
}

input SupporterFiltersInput {
  id: IDFilterInput
  contact_information: ContactInformationFiltersInput
  virtual_cats: VirtualCatFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [SupporterFiltersInput]
  or: [SupporterFiltersInput]
  not: SupporterFiltersInput
}

input SupporterInput {
  contact_information: ID
  virtual_cats: [ID]
  publishedAt: DateTime
}

type Supporter {
  contact_information: ContactInformationEntityResponse
  virtual_cats(
    filters: VirtualCatFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): VirtualCatRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type SupporterEntity {
  id: ID
  attributes: Supporter
}

type SupporterEntityResponse {
  data: SupporterEntity
}

type SupporterEntityResponseCollection {
  data: [SupporterEntity!]!
  meta: ResponseCollectionMeta!
}

type SupporterRelationResponseCollection {
  data: [SupporterEntity!]!
}

input VirtualCatFiltersInput {
  id: IDFilterInput
  cat: CatFiltersInput
  supporters: SupporterFiltersInput
  caretaker: ContactInformationFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [VirtualCatFiltersInput]
  or: [VirtualCatFiltersInput]
  not: VirtualCatFiltersInput
}

input VirtualCatInput {
  cat: ID
  supporters: [ID]
  caretaker: ID
  publishedAt: DateTime
}

type VirtualCat {
  cat: CatEntityResponse
  supporters(
    filters: SupporterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SupporterRelationResponseCollection
  caretaker: ContactInformationEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type VirtualCatEntity {
  id: ID
  attributes: VirtualCat
}

type VirtualCatEntityResponse {
  data: VirtualCatEntity
}

type VirtualCatEntityResponseCollection {
  data: [VirtualCatEntity!]!
  meta: ResponseCollectionMeta!
}

type VirtualCatRelationResponseCollection {
  data: [VirtualCatEntity!]!
}

union GenericMorph =
    UploadFile
  | UploadFolder
  | ContentReleasesRelease
  | ContentReleasesReleaseAction
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | AdoptedCat
  | Announcement
  | AnnouncementTag
  | Article
  | ArticleView
  | Cat
  | CatTag
  | ContactInformation
  | FoundCat
  | Image
  | LookingForAdoptionCat
  | LostCat
  | Supporter
  | VirtualCat

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(
    filters: UploadFolderFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFolderEntityResponseCollection
  contentReleasesRelease(id: ID): ContentReleasesReleaseEntityResponse
  contentReleasesReleases(
    filters: ContentReleasesReleaseFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ContentReleasesReleaseEntityResponseCollection
  contentReleasesReleaseAction(
    id: ID
  ): ContentReleasesReleaseActionEntityResponse
  contentReleasesReleaseActions(
    filters: ContentReleasesReleaseActionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ContentReleasesReleaseActionEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  adoptedCat(id: ID): AdoptedCatEntityResponse
  adoptedCats(
    filters: AdoptedCatFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): AdoptedCatEntityResponseCollection
  announcement(id: ID): AnnouncementEntityResponse
  announcements(
    filters: AnnouncementFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): AnnouncementEntityResponseCollection
  announcementTag(id: ID): AnnouncementTagEntityResponse
  announcementTags(
    filters: AnnouncementTagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AnnouncementTagEntityResponseCollection
  article(id: ID): ArticleEntityResponse
  articles(
    filters: ArticleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ArticleEntityResponseCollection
  articleView(id: ID): ArticleViewEntityResponse
  articleViews(
    filters: ArticleViewFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ArticleViewEntityResponseCollection
  cat(id: ID): CatEntityResponse
  cats(
    filters: CatFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): CatEntityResponseCollection
  catTag(id: ID): CatTagEntityResponse
  catTags(
    filters: CatTagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): CatTagEntityResponseCollection
  contactInformation(id: ID): ContactInformationEntityResponse
  contactInformations(
    filters: ContactInformationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): ContactInformationEntityResponseCollection
  foundCat(id: ID): FoundCatEntityResponse
  foundCats(
    filters: FoundCatFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): FoundCatEntityResponseCollection
  image(id: ID): ImageEntityResponse
  images(
    filters: ImageFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ImageEntityResponseCollection
  lookingForAdoptionCat(id: ID): LookingForAdoptionCatEntityResponse
  lookingForAdoptionCats(
    filters: LookingForAdoptionCatFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LookingForAdoptionCatEntityResponseCollection
  lostCat(id: ID): LostCatEntityResponse
  lostCats(
    filters: LostCatFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): LostCatEntityResponseCollection
  supporter(id: ID): SupporterEntityResponse
  supporters(
    filters: SupporterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SupporterEntityResponseCollection
  virtualCat(id: ID): VirtualCatEntityResponse
  virtualCats(
    filters: VirtualCatFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): VirtualCatEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(
    id: ID!
    data: UploadFolderInput!
  ): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createContentReleasesRelease(
    data: ContentReleasesReleaseInput!
  ): ContentReleasesReleaseEntityResponse
  updateContentReleasesRelease(
    id: ID!
    data: ContentReleasesReleaseInput!
  ): ContentReleasesReleaseEntityResponse
  deleteContentReleasesRelease(id: ID!): ContentReleasesReleaseEntityResponse
  createContentReleasesReleaseAction(
    data: ContentReleasesReleaseActionInput!
  ): ContentReleasesReleaseActionEntityResponse
  updateContentReleasesReleaseAction(
    id: ID!
    data: ContentReleasesReleaseActionInput!
  ): ContentReleasesReleaseActionEntityResponse
  deleteContentReleasesReleaseAction(
    id: ID!
  ): ContentReleasesReleaseActionEntityResponse
  createAdoptedCat(data: AdoptedCatInput!): AdoptedCatEntityResponse
  updateAdoptedCat(id: ID!, data: AdoptedCatInput!): AdoptedCatEntityResponse
  deleteAdoptedCat(id: ID!): AdoptedCatEntityResponse
  createAnnouncement(data: AnnouncementInput!): AnnouncementEntityResponse
  updateAnnouncement(
    id: ID!
    data: AnnouncementInput!
  ): AnnouncementEntityResponse
  deleteAnnouncement(id: ID!): AnnouncementEntityResponse
  createAnnouncementTag(
    data: AnnouncementTagInput!
  ): AnnouncementTagEntityResponse
  updateAnnouncementTag(
    id: ID!
    data: AnnouncementTagInput!
  ): AnnouncementTagEntityResponse
  deleteAnnouncementTag(id: ID!): AnnouncementTagEntityResponse
  createArticle(data: ArticleInput!): ArticleEntityResponse
  updateArticle(id: ID!, data: ArticleInput!): ArticleEntityResponse
  deleteArticle(id: ID!): ArticleEntityResponse
  createArticleView(data: ArticleViewInput!): ArticleViewEntityResponse
  updateArticleView(id: ID!, data: ArticleViewInput!): ArticleViewEntityResponse
  deleteArticleView(id: ID!): ArticleViewEntityResponse
  createCat(data: CatInput!): CatEntityResponse
  updateCat(id: ID!, data: CatInput!): CatEntityResponse
  deleteCat(id: ID!): CatEntityResponse
  createCatTag(data: CatTagInput!): CatTagEntityResponse
  updateCatTag(id: ID!, data: CatTagInput!): CatTagEntityResponse
  deleteCatTag(id: ID!): CatTagEntityResponse
  createContactInformation(
    data: ContactInformationInput!
  ): ContactInformationEntityResponse
  updateContactInformation(
    id: ID!
    data: ContactInformationInput!
  ): ContactInformationEntityResponse
  deleteContactInformation(id: ID!): ContactInformationEntityResponse
  createFoundCat(data: FoundCatInput!): FoundCatEntityResponse
  updateFoundCat(id: ID!, data: FoundCatInput!): FoundCatEntityResponse
  deleteFoundCat(id: ID!): FoundCatEntityResponse
  createImage(data: ImageInput!): ImageEntityResponse
  updateImage(id: ID!, data: ImageInput!): ImageEntityResponse
  deleteImage(id: ID!): ImageEntityResponse
  createLookingForAdoptionCat(
    data: LookingForAdoptionCatInput!
  ): LookingForAdoptionCatEntityResponse
  updateLookingForAdoptionCat(
    id: ID!
    data: LookingForAdoptionCatInput!
  ): LookingForAdoptionCatEntityResponse
  deleteLookingForAdoptionCat(id: ID!): LookingForAdoptionCatEntityResponse
  createLostCat(data: LostCatInput!): LostCatEntityResponse
  updateLostCat(id: ID!, data: LostCatInput!): LostCatEntityResponse
  deleteLostCat(id: ID!): LostCatEntityResponse
  createSupporter(data: SupporterInput!): SupporterEntityResponse
  updateSupporter(id: ID!, data: SupporterInput!): SupporterEntityResponse
  deleteSupporter(id: ID!): SupporterEntityResponse
  createVirtualCat(data: VirtualCatInput!): VirtualCatEntityResponse
  updateVirtualCat(id: ID!, data: VirtualCatInput!): VirtualCatEntityResponse
  deleteVirtualCat(id: ID!): VirtualCatEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Delete an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Change user password. Confirm with the current password.
  changePassword(
    currentPassword: String!
    password: String!
    passwordConfirmation: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
